
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.testlang.parser;

import com.testlang.ast.*;
import java_cup.runtime.*;
import java.util.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\043\000\002\002\005\000\002\002\004\000\002\002" +
    "\004\000\002\002\003\000\002\003\006\000\002\004\004" +
    "\000\002\004\003\000\002\005\006\000\002\005\007\000" +
    "\002\006\004\000\002\006\003\000\002\006\002\000\002" +
    "\007\007\000\002\007\007\000\002\010\004\000\002\010" +
    "\003\000\002\011\007\000\002\012\004\000\002\012\003" +
    "\000\002\013\003\000\002\013\003\000\002\014\005\000" +
    "\002\014\005\000\002\014\010\000\002\014\010\000\002" +
    "\014\007\000\002\014\007\000\002\015\004\000\002\015" +
    "\003\000\002\016\007\000\002\016\006\000\002\017\007" +
    "\000\002\017\010\000\002\017\010\000\002\017\007" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\136\000\010\004\013\007\012\010\007\001\002\000" +
    "\006\002\ufffe\010\007\001\002\000\004\002\140\001\002" +
    "\000\006\007\012\010\ufff6\001\002\000\004\025\044\001" +
    "\002\000\006\007\012\010\007\001\002\000\006\007\ufff7" +
    "\010\ufff7\001\002\000\004\025\033\001\002\000\004\021" +
    "\015\001\002\000\006\002\ufff2\010\ufff2\001\002\000\006" +
    "\005\021\006\020\001\002\000\010\005\ufffb\006\ufffb\022" +
    "\ufffb\001\002\000\010\005\021\006\020\022\032\001\002" +
    "\000\004\026\025\001\002\000\004\024\022\001\002\000" +
    "\004\026\023\001\002\000\004\023\024\001\002\000\010" +
    "\005\ufffa\006\ufffa\022\ufffa\001\002\000\004\024\026\001" +
    "\002\000\004\026\027\001\002\000\004\023\030\001\002" +
    "\000\010\005\ufff9\006\ufff9\022\ufff9\001\002\000\010\005" +
    "\ufffc\006\ufffc\022\ufffc\001\002\000\006\007\ufffd\010\ufffd" +
    "\001\002\000\004\024\034\001\002\000\006\026\035\027" +
    "\036\001\002\000\004\023\040\001\002\000\004\023\037" +
    "\001\002\000\006\007\ufff4\010\ufff4\001\002\000\006\007" +
    "\ufff5\010\ufff5\001\002\000\006\007\ufff8\010\ufff8\001\002" +
    "\000\006\002\uffff\010\007\001\002\000\006\002\ufff3\010" +
    "\ufff3\001\002\000\004\021\045\001\002\000\014\011\055" +
    "\012\054\013\046\014\052\015\050\001\002\000\004\026" +
    "\127\001\002\000\016\011\uffee\012\uffee\013\uffee\014\uffee" +
    "\015\uffee\022\uffee\001\002\000\010\006\111\016\107\017" +
    "\110\001\002\000\016\011\055\012\054\013\046\014\052" +
    "\015\050\022\106\001\002\000\004\026\103\001\002\000" +
    "\016\011\uffef\012\uffef\013\uffef\014\uffef\015\uffef\022\uffef" +
    "\001\002\000\004\026\061\001\002\000\004\026\057\001" +
    "\002\000\016\011\uffed\012\uffed\013\uffed\014\uffed\015\uffed" +
    "\022\uffed\001\002\000\004\023\060\001\002\000\016\011" +
    "\uffec\012\uffec\013\uffec\014\uffec\015\uffec\022\uffec\001\002" +
    "\000\004\021\062\001\002\000\010\006\066\017\064\022" +
    "\065\001\002\000\010\006\uffe5\017\uffe5\022\uffe5\001\002" +
    "\000\004\024\100\001\002\000\004\023\077\001\002\000" +
    "\004\026\073\001\002\000\010\006\066\017\064\022\071" +
    "\001\002\000\010\006\uffe6\017\uffe6\022\uffe6\001\002\000" +
    "\004\023\072\001\002\000\016\011\uffea\012\uffea\013\uffea" +
    "\014\uffea\015\uffea\022\uffea\001\002\000\004\024\074\001" +
    "\002\000\004\026\075\001\002\000\004\023\076\001\002" +
    "\000\010\006\uffe4\017\uffe4\022\uffe4\001\002\000\016\011" +
    "\uffe8\012\uffe8\013\uffe8\014\uffe8\015\uffe8\022\uffe8\001\002" +
    "\000\004\026\101\001\002\000\004\023\102\001\002\000" +
    "\010\006\uffe3\017\uffe3\022\uffe3\001\002\000\004\023\104" +
    "\001\002\000\016\011\uffeb\012\uffeb\013\uffeb\014\uffeb\015" +
    "\uffeb\022\uffeb\001\002\000\016\011\ufff0\012\ufff0\013\ufff0" +
    "\014\ufff0\015\ufff0\022\ufff0\001\002\000\006\002\ufff1\010" +
    "\ufff1\001\002\000\004\024\124\001\002\000\004\020\121" +
    "\001\002\000\004\026\112\001\002\000\006\020\113\024" +
    "\114\001\002\000\004\026\117\001\002\000\004\026\115" +
    "\001\002\000\004\023\116\001\002\000\016\011\uffe1\012" +
    "\uffe1\013\uffe1\014\uffe1\015\uffe1\022\uffe1\001\002\000\004" +
    "\023\120\001\002\000\016\011\uffe0\012\uffe0\013\uffe0\014" +
    "\uffe0\015\uffe0\022\uffe0\001\002\000\004\026\122\001\002" +
    "\000\004\023\123\001\002\000\016\011\uffdf\012\uffdf\013" +
    "\uffdf\014\uffdf\015\uffdf\022\uffdf\001\002\000\004\027\125" +
    "\001\002\000\004\023\126\001\002\000\016\011\uffe2\012" +
    "\uffe2\013\uffe2\014\uffe2\015\uffe2\022\uffe2\001\002\000\004" +
    "\021\130\001\002\000\010\006\066\017\064\022\131\001" +
    "\002\000\004\023\135\001\002\000\010\006\066\017\064" +
    "\022\133\001\002\000\004\023\134\001\002\000\016\011" +
    "\uffe9\012\uffe9\013\uffe9\014\uffe9\015\uffe9\022\uffe9\001\002" +
    "\000\016\011\uffe7\012\uffe7\013\uffe7\014\uffe7\015\uffe7\022" +
    "\uffe7\001\002\000\006\007\012\010\007\001\002\000\006" +
    "\002\001\010\007\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\136\000\016\002\004\003\005\006\007\007\010\010" +
    "\003\011\013\001\001\000\004\011\042\001\001\000\002" +
    "\001\001\000\006\006\135\007\010\001\001\000\002\001" +
    "\001\000\010\007\040\010\041\011\013\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\004\016\005\015\001\001\000\002\001\001" +
    "\000\004\005\030\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\011\042\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\012\050\013\052\014\046\017\055\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\013\104\014\046\017\055\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\015\066\016\062\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\016\067\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\015\131\016\062\001\001\000" +
    "\002\001\001\000\004\016\067\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\007\040\010" +
    "\136\011\013\001\001\000\004\011\042\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private String lastExpected = "";

    public void syntax_error(Symbol cur_token) {
        StringBuilder msg = new StringBuilder();
        msg.append("Syntax error at line ").append(cur_token.left);

        // Add information about the problematic token
        if (cur_token.value != null) {
            msg.append(": unexpected '").append(cur_token.value).append("'");
        }

        // Add expected tokens if available
        if (!lastExpected.isEmpty()) {
            msg.append("\n  Expected: ").append(lastExpected);
        }

        report_error(msg.toString(), null);
    }

    public void report_error(String message, Object info) {
        System.err.println(message);
    }

    public void unrecovered_syntax_error(Symbol cur_token) throws ParserException {
        throw new ParserException(
            "Cannot recover from syntax error. Parsing aborted.",
            cur_token.left
        );
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= config_block variable_list test_list 
            {
              Program RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Config c = (Config)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int varsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List vars = (List)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int testsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int testsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List tests = (List)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        Program p = new Program();
        if (c != null) p.setConfig(c);
        if (vars != null) {
            for (Object v : vars) {
                p.addVariable((Variable) v);
            }
        }
        for (Object t : tests) {
            p.addTest((Test) t);
        }
        RESULT = p;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= variable_list test_list 
            {
              Program RESULT =null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List vars = (List)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int testsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int testsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List tests = (List)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        Program p = new Program();
        if (vars != null) {
            for (Object v : vars) {
                p.addVariable((Variable) v);
            }
        }
        for (Object t : tests) {
            p.addTest((Test) t);
        }
        RESULT = p;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // program ::= test_list 
            {
              Program RESULT =null;
		int testsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int testsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List tests = (List)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        Program p = new Program();
        for (Object t : tests) {
            p.addTest((Test) t);
        }
        RESULT = p;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // config_block ::= CONFIG LBRACE config_items RBRACE 
            {
              Config RESULT =null;
		int itemsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int itemsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List items = (List)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        Config c = new Config();
        for (Object item : items) {
            if (item instanceof String) {
                c.setBaseUrl((String) item);
            } else if (item instanceof Header) {
                c.addHeader((Header) item);
            }
        }
        RESULT = c;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("config_block",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // config_items ::= config_items config_item 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int itemleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int itemright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object item = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        list.add(item);
        RESULT = list;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("config_items",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // config_items ::= config_item 
            {
              List RESULT =null;
		int itemleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int itemright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object item = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        List list = new ArrayList();
        list.add(item);
        RESULT = list;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("config_items",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // config_item ::= BASE_URL EQUALS STRING SEMICOLON 
            {
              Object RESULT =null;
		int urlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int urlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String url = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT = url;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("config_item",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // config_item ::= HEADER STRING EQUALS STRING SEMICOLON 
            {
              Object RESULT =null;
		int keyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String key = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT = new Header(key, value);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("config_item",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // variable_list ::= variable_list variable_decl 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        list.add(v);
        RESULT = list;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_list",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // variable_list ::= variable_decl 
            {
              List RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        List list = new ArrayList();
        list.add(v);
        RESULT = list;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_list",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // variable_list ::= 
            {
              List RESULT =null;
		
        RESULT = new ArrayList();
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_list",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // variable_decl ::= LET IDENTIFIER EQUALS STRING SEMICOLON 
            {
              Variable RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT = new Variable(name, value);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_decl",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // variable_decl ::= LET IDENTIFIER EQUALS NUMBER SEMICOLON 
            {
              Variable RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer value = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT = new Variable(name, value);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_decl",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // test_list ::= test_list test_block 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Test t = (Test)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        list.add(t);
        RESULT = list;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("test_list",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // test_list ::= test_block 
            {
              List RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Test t = (Test)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        List list = new ArrayList();
        list.add(t);
        RESULT = list;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("test_list",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // test_block ::= TEST IDENTIFIER LBRACE statements RBRACE 
            {
              Test RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int stmtsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int stmtsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List stmts = (List)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        Test test = new Test(name);
        for (Object s : stmts) {
            test.addStatement((Statement) s);
        }
        RESULT = test;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("test_block",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // statements ::= statements statement 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        list.add(s);
        RESULT = list;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statements",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // statements ::= statement 
            {
              List RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        List list = new ArrayList();
        list.add(s);
        RESULT = list;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statements",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // statement ::= request 
            {
              Statement RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Request r = (Request)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = r;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // statement ::= assertion 
            {
              Statement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Assertion a = (Assertion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = a;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // request ::= GET STRING SEMICOLON 
            {
              Request RESULT =null;
		int urlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int urlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String url = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT = new Request("GET", url);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("request",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // request ::= DELETE STRING SEMICOLON 
            {
              Request RESULT =null;
		int urlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int urlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String url = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT = new Request("DELETE", url);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("request",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // request ::= POST STRING LBRACE request_items RBRACE SEMICOLON 
            {
              Request RESULT =null;
		int urlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int urlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String url = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int itemsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int itemsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List items = (List)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
        Request req = new Request("POST", url);
        for (Object item : items) {
            if (item instanceof Header) {
                req.addHeader((Header) item);
            } else if (item instanceof String) {
                req.setBody((String) item);
            }
        }
        RESULT = req;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("request",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // request ::= PUT STRING LBRACE request_items RBRACE SEMICOLON 
            {
              Request RESULT =null;
		int urlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int urlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String url = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int itemsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int itemsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List items = (List)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
        Request req = new Request("PUT", url);
        for (Object item : items) {
            if (item instanceof Header) {
                req.addHeader((Header) item);
            } else if (item instanceof String) {
                req.setBody((String) item);
            }
        }
        RESULT = req;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("request",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // request ::= POST STRING LBRACE RBRACE SEMICOLON 
            {
              Request RESULT =null;
		int urlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int urlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String url = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
        RESULT = new Request("POST", url);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("request",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // request ::= PUT STRING LBRACE RBRACE SEMICOLON 
            {
              Request RESULT =null;
		int urlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int urlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String url = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
        RESULT = new Request("PUT", url);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("request",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // request_items ::= request_items request_item 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int itemleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int itemright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object item = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        list.add(item);
        RESULT = list;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("request_items",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // request_items ::= request_item 
            {
              List RESULT =null;
		int itemleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int itemright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object item = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        List list = new ArrayList();
        list.add(item);
        RESULT = list;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("request_items",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // request_item ::= HEADER STRING EQUALS STRING SEMICOLON 
            {
              Object RESULT =null;
		int keyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String key = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT = new Header(key, value);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("request_item",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // request_item ::= BODY EQUALS STRING SEMICOLON 
            {
              Object RESULT =null;
		int bodyContentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bodyContentright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String bodyContent = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT = bodyContent;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("request_item",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // assertion ::= EXPECT STATUS EQUALS NUMBER SEMICOLON 
            {
              Assertion RESULT =null;
		int codeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int coderight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer code = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        Assertion a = new Assertion(Assertion.Type.STATUS_EQUALS);
        a.setStatusCode(code);
        RESULT = a;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assertion",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // assertion ::= EXPECT HEADER STRING EQUALS STRING SEMICOLON 
            {
              Assertion RESULT =null;
		int keyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String key = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        Assertion a = new Assertion(Assertion.Type.HEADER_EQUALS);
        a.setKey(key);
        a.setValue(value);
        RESULT = a;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assertion",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // assertion ::= EXPECT HEADER STRING CONTAINS STRING SEMICOLON 
            {
              Assertion RESULT =null;
		int keyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String key = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        Assertion a = new Assertion(Assertion.Type.HEADER_CONTAINS);
        a.setKey(key);
        a.setValue(value);
        RESULT = a;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assertion",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // assertion ::= EXPECT BODY CONTAINS STRING SEMICOLON 
            {
              Assertion RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        Assertion a = new Assertion(Assertion.Type.BODY_CONTAINS);
        a.setValue(value);
        RESULT = a;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assertion",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
